import datetime
from enum import Enum, auto

from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    Filters,
    MessageHandler,
)

from src import current_bot
from src.jobs.send_alert import set_morning_alert
from src.models import NotificationTime, Response, User


@current_bot.register_handler(CommandHandler, "start")
@current_bot.log_handler
def start(update: Update, *_) -> None:
    user = update.effective_user
    db_user, created = User.get_or_create(user_id=str(user.id), username=user.username)

    if not created and db_user.subscribed:
        user.send_message("–í–∏ –≤–∂–µ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ")
        return

    if not db_user.subscribed:
        db_user.subscribed = True
        db_user.save(only=(User.subscribed,))

    user.send_message("–í—ñ—Ç–∞—é! –í–∏ –ø—ñ–¥–ø–∏—Å–∞–ª–∏—Å—è –Ω–∞ —à–∫—ñ–ª—å–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è üòä")


@current_bot.register_handler(CommandHandler, "rules")
@current_bot.log_handler
def rules(update: Update, *_) -> None:
    user = update.effective_user
    user.send_message(
        "<b>–ê–ª–≥–æ—Ä–∏—Ç–º —Ä–æ–±–æ—Ç–∏ —à–∫–æ–ª–∏, –≤—Ä–∞—Ö–æ–≤—É—é—á—ñ —á–∞—Å—Ç—ñ –∞—Ç–∞–∫–∏ –Ω–∞ –ö–∏—ó–≤:</b>\n"
        "‚ñ∂Ô∏è –Ø–∫—â–æ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ –ö–ú–î–ê, –ú–û–ù –ø—Ä–æ —Ç–µ —â–æ —à–∫–æ–ª–∏ —É –ö–∏—î–≤—ñ –º–∞—é—Ç—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ "
        "–¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ - –º–∏ –±—É–¥–µ–º–æ —É —Ü–µ–π —á–∞—Å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ.\n"
        "‚ñ∂Ô∏è –Ø–∫—â–æ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π –ö–ú–î–ê, –ú–û–ù –Ω–µ–º–∞—î, –∞–±–æ —à–∫–æ–ª–∏ –º–∞—é—Ç—å –ø—Ä–∞–≤–æ –ø—Ä–∏–π–º–∞—Ç–∏ "
        "—Ä—ñ—à–µ–Ω–Ω—è —â–æ–¥–æ —Ñ–æ—Ä–º–∞—Ç—É —Ä–æ–±–æ—Ç–∏ —Å–∞–º–æ—Å—Ç—ñ–π–Ω–æ, –º–∏ –±—É–¥–µ–º–æ –∫–µ—Ä—É–≤–∞—Ç–∏—Å—å –Ω–∞—Å—Ç—É–ø–Ω–∏–º:\n"
        "    ‚ñ∂Ô∏è —è–∫—â–æ —Ç—Ä–∏–≤–∞—î –ø–æ–≤—ñ—Ç—Ä—è–Ω–∞ —Ç—Ä–∏–≤–æ–≥–∞ –∑—Ä–∞–Ω–∫—É –¥–æ 8:10 –≤–∫–ª—é—á–Ω–æ - —à–∫–æ–ª–∞ –±—É–¥–µ –≤ —Ü–µ–π"
        " –¥–µ–Ω—å –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–∏—Å—Ç–∞–Ω—Ü—ñ–π–Ω–æ.\n"
        "    ‚ñ∂Ô∏è —è–∫—â–æ —Ç—Ä–∏–≤–æ–≥–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å –ø—ñ—Å–ª—è 8:10 - —É—á–Ω—ñ —Ç–∞ –≤—á–∏—Ç–µ–ª—ñ, —â–æ –≤–∂–µ –ø—Ä–∏—ó—Ö–∞–ª–∏ "
        "–≤ —à–∫–æ–ª—É –º–∞—é—Ç—å –±—É—Ç–∏ –≤ —É–∫—Ä–∏—Ç—Ç—ñ. –í —É–∫—Ä–∏—Ç—Ç—ñ –±—É–¥–µ –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —á–µ—Ä–≥–æ–≤–∏–π –∫—É—Ä–∞—Ç–æ—Ä —à–∫–æ–ª–∏ "
        "–≤–∂–µ –∑ 8 —Ä–∞–Ω–∫—É. –í—á–∏—Ç–µ–ª—ñ, —â–æ –∑–∞—Å—Ç–∞–ª–∏ –ø–æ–≤—ñ—Ç—Ä—è–Ω—É —Ç—Ä–∏–≤–æ–≥—É –≤ –¥–æ—Ä–æ–∑—ñ –º–æ–∂—É—Ç—å "
        "–∑–∞–ª–∏—à–∞—Ç–∏—Å—å –≤ —É–∫—Ä–∏—Ç—Ç—ñ <i>(–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ –º–µ—Ç—Ä–æ –ö–ª–æ–≤—Å—å–∫–∞/–ê—Ä—Å–µ–Ω–∞–ª—å–Ω–∞)</i>, "
        "—á–∏ –¥—ñ–π—Ç–∏ –¥–æ —É–∫—Ä–∏—Ç—Ç—è –≤ —à–∫–æ–ª—ñ <i>(–Ω–∞ –≤–ª–∞—Å–Ω–∏–π —Ä–æ–∑—Å—É–¥)</i>. "
        "–ü—ñ—Å–ª—è –≤—ñ–¥–±–æ—é –º–∏ —Ä–æ–∑–ø–æ—á–∏–Ω–∞—î–º–æ –æ—á–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è.\n"
        "    ‚ñ∂Ô∏è —è–∫—â–æ —Ç—Ä–∏–≤–æ–≥–∞ —Ä–æ–∑–ø–æ—á–∞–ª–∞—Å—å –ø—ñ—Å–ª—è 9:00, —Ç–æ –¥—ñ—î–º–æ –∑–∞ –≤–∂–µ –≤—ñ–¥–ø—Ä–∞—Ü—å–æ–≤–∞–Ω–∏–º "
        "–ø–ª–∞–Ω–æ–º - —É—Ä–æ–∫–∏ –ø—Ä–∏–∑—É–ø–∏–Ω—è—é—Ç—å—Å—è —Ç–∞ –≤—Å—ñ —Å–ø—É—Å–∫–∞—é—Ç—å—Å—è –≤ —É–∫—Ä–∏—Ç—Ç—è. –ü—ñ—Å–ª—è –≤—ñ–¥–±–æ—é –º–∏ "
        "–ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ –æ—á–Ω–µ –Ω–∞–≤—á–∞–Ω–Ω—è."
    )


@current_bot.register_handler(CommandHandler, "unsubscribe")
@current_bot.log_handler
def unsubscribe(update: Update, *_) -> None:
    user = update.effective_user

    db_user = User.get_or_none(user_id=user.id)
    if db_user and db_user.subscribed:
        db_user.subscribed = False
        db_user.save(only=(User.subscribed,))

        user.send_message("–ü—ñ–¥–ø–∏—Å–∫—É —Å–∫–∞—Å–æ–≤–∞–Ω–æ üò¢")
        return

    user.send_message("–í–∏ –Ω–µ –±—É–ª–∏ –ø—ñ–¥–ø–∏—Å–∞–Ω—ñ")


@current_bot.register_handler(CommandHandler, "logs")
@current_bot.log_handler
def get_logs(update: Update, *_) -> None:
    user = update.effective_user
    log_file = open(current_bot.config.LOG_FILENAME, "rb")
    user.send_document(document=log_file)


@current_bot.register_handler(CommandHandler, "check_text")
@current_bot.log_handler
@current_bot.protected
def check_text(update: Update, *_) -> None:
    user = update.effective_user

    message = "\n\n".join(
        [
            f"<i>{response.id}:</i> {response.value}"
            for response in Response.select().order_by(Response.keyboard_order)
        ]
    )

    user.send_message(message)


@current_bot.register_handler(CommandHandler, "check_time")
@current_bot.log_handler
@current_bot.protected
def check_time(update: Update, *_) -> None:
    user = update.effective_user

    notification_time = NotificationTime.get_by_id(1)
    time = notification_time.time.strftime("%H:%M")

    user.send_message(f"–ó–∞–¥–∞–Ω–∏–π —á–∞—Å: {time}")


@current_bot.log_handler
@current_bot.protected
def change_time(update: Update, *_) -> int:
    user = update.effective_user

    notification_time = NotificationTime.get_by_id(1)
    time = notification_time.time.strftime("%H:%M")

    user.send_message(f"–ó–∞–¥–∞–Ω–∏–π —á–∞—Å: {time}")
    user.send_message("–ù–∞–¥—ñ—à–ª—ñ—Ç—å —á–∞—Å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•")

    return ChangeTimeStatus.CHOOSE_TIME


@current_bot.log_handler
@current_bot.protected
def get_time(update: Update, *_) -> int:
    user = update.effective_user

    text = update.message.text
    parsed_time = datetime.datetime.strptime(text, "%H:%M")
    time = parsed_time.time()

    notification_time = NotificationTime.get_by_id(1)
    notification_time.time = time
    notification_time.save()

    set_morning_alert()

    user.send_message(f"–ù–æ–≤–∏–π —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {time}")

    return ConversationHandler.END


@current_bot.log_handler
@current_bot.protected
def change_text(update: Update, *_) -> int:
    user = update.effective_user

    notification_time = NotificationTime.get_by_id(1)
    time = notification_time.time.strftime("%H:%M")

    reply_markup = ReplyKeyboardMarkup(
        [
            [response.description.format(time)]
            for response in Response.select(Response.description).order_by(
                Response.keyboard_order
            )
        ],
        one_time_keyboard=True,
        resize_keyboard=True,
    )
    user.send_message("–û–±–µ—Ä—ñ—Ç—å –≤—ñ–¥–ø–æ–≤—ñ–¥—å", reply_markup=reply_markup)

    return ChangeTextStatus.CHOOSE_RESPONSE


@current_bot.log_handler
@current_bot.protected
def get_response(update: Update, context: CallbackContext) -> int:
    user = update.effective_user

    notification_time = NotificationTime.get_by_id(1)
    time = notification_time.time.strftime("%H:%M")
    description = update.message.text.replace(time, "{}", 1)

    response = Response.select().where(Response.description == description).first()
    context.user_data["response_id"] = response.id

    user.send_message(
        f"–ü–æ—Ç–æ—á–Ω–∏–π —Ç–µ–∫—Å—Ç:\n{response.value}", reply_markup=ReplyKeyboardRemove()
    )
    user.send_message(
        "–ù–∞–ø–∏—à—ñ—Ç—å –Ω–æ–≤–∏–π —Ç–µ–∫—Å—Ç. –í–∏ –º–æ–∂–µ—Ç–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ HTML-—Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è"
    )

    return ChangeTextStatus.SEND_NEW_TEXT


@current_bot.log_handler
@current_bot.protected
def get_new_text(update: Update, context: CallbackContext) -> int:
    user = update.effective_user

    response = Response.get_by_id(context.user_data["response_id"])
    response.change_value(update.message.text)

    user.send_message("–¢–µ–∫—Å—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ")

    return ConversationHandler.END


@current_bot.log_handler
def cancel(update: Update, *_) -> int:
    user = update.effective_user
    user.send_message("–°–∫–∞—Å–æ–≤–∞–Ω–æ", reply_markup=ReplyKeyboardRemove())

    return ConversationHandler.END


class ChangeTimeStatus(Enum):
    CHOOSE_TIME = auto()


class ChangeTextStatus(Enum):
    CHOOSE_RESPONSE = auto()
    SEND_NEW_TEXT = auto()


current_bot.dispatcher.add_handler(
    ConversationHandler(
        entry_points=[CommandHandler("change_time", change_time)],
        states={
            ChangeTimeStatus.CHOOSE_TIME: [
                MessageHandler(Filters.regex(r"^\d{2}:\d{2}$"), get_time)
            ]
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
)


current_bot.dispatcher.add_handler(
    ConversationHandler(
        entry_points=[CommandHandler("change_text", change_text)],
        states={
            ChangeTextStatus.CHOOSE_RESPONSE: [
                MessageHandler(Filters.text & ~Filters.command, get_response)
            ],
            ChangeTextStatus.SEND_NEW_TEXT: [
                MessageHandler(Filters.text & ~Filters.command, get_new_text)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
)
